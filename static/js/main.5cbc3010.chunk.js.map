{"version":3,"sources":["components/footer/Footer.jsx","components/search-box/SearchBox.jsx","assets/homepageimg.jpg","pages/homepage/Homepage.jsx","redux/location/location.action.js","pages/weatherpage/getWeatherData.js","components/date-display/DateDisplay.jsx","components/general-weather/GeneralWeather.jsx","components/weather-icon/WeatherIcon.jsx","components/weather-card/WeatherCard.jsx","components/card-container/CardContainer.jsx","components/button/Button.jsx","pages/weatherpage/WeatherPage.jsx","redux/date/date.action.js","redux/temperature/temperature.action.js","redux/icon/icon.action.js","App.js","reportWebVitals.js","redux/location/location.reducer.js","redux/date/date.reducer.js","redux/temperature/temperature.reducer.js","redux/icon/icon.reducer.js","redux/root.reducer.js","redux/store.js","index.js"],"names":["Footer","year","Date","getFullYear","withRouter","props","useState","item","setItem","path","navigate","type","className","placeholder","onChange","event","target","value","to","onClick","setSearchedItem","Homepage","dispatch","useDispatch","src","homepageimg","alt","city","payload","setCityAction","GetWeatherDetails","cityName","fetch","then","data","json","connect","state","date","fetchDate","unixDate","moment","unix","format","temperature","temp","feel_like","Math","round","feels_like","temp_max","temp_min","humidity","WeatherIcon","icon","WeatherCard","day","Min","Max","description","CardContainer","forecast","console","log","dailyRecord","filter","index","map","cardItem","dt","main","weather","Button","children","location","country","history","weatherData","setWeatherData","useEffect","result","catch","err","push","cod","countryName","current","list","dateDetails","tempDetails","iconDetails","App","exact","component","HomePage","WeatherPage","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","INITIAL_STATE","locationReducer","action","dateReducer","tempReducer","iconReducer","combineReducers","middleware","logger","store","createStore","rootReducer","applyMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5cbc3010.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./footer.css\";\r\n\r\nfunction Footer(){\r\n    const year = new Date().getFullYear();\r\n    return (\r\n        <footer>\r\n            <p>Made with ðŸ’— by Chirag Walia</p>\r\n            <p>Copyright â“’ {year}</p>\r\n        </footer>  \r\n    )\r\n}\r\n\r\nexport default Footer;","/* SearchBox Component takes the following props:\r\n        1) Placeholder - Which will be displayed as the placeholder\r\n        2) setSearchedItem - Generic function that sets the state in the parent component. Can be used to search a city \r\n        & later on for other fields as well\r\n        3) navigate - This will be the route that we want to route to if clicked. This will be defaulted to \"/\" if null\r\n*/\r\n\r\nimport React, {useState} from \"react\";\r\nimport {Link, withRouter} from \"react-router-dom\";\r\nimport { BsSearch } from \"react-icons/bs\";\r\nimport \"./search-box.scss\";\r\n\r\nfunction SearchBox(props){\r\n    //Local State as we'd like to set the SearchedItem state only when search icon is clicked\r\n    const [item, setItem] = useState();\r\n    const path = (props.navigate?props.navigate:\"/\");\r\n    return (\r\n        <div>\r\n                <input type=\"search\" className=\"search-bar\" placeholder = { props.placeholder} onChange={(event) => setItem(event.target.value)} value = {item}/>\r\n                <Link to= {path}>\r\n                    <BsSearch className=\"search-icon\" onClick={() => props.setSearchedItem(item)}/>\r\n                </Link>\r\n       </div>\r\n    )\r\n}\r\n\r\nexport default withRouter(SearchBox);","export default __webpack_public_path__ + \"static/media/homepageimg.24667329.jpg\";","import React from \"react\";\r\nimport Footer from \"../../components/footer/Footer\";\r\nimport SearchBox from \"../../components/search-box/SearchBox\";\r\nimport homepageimg from \"../../assets/homepageimg.jpg\"; \r\nimport \"./homepage.scss\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {setCityAction} from \"../../redux/location/location.action\";\r\n\r\nfunction Homepage(){\r\n    const dispatch = useDispatch();\r\n\r\n    function setCity(city){\r\n        return(\r\n            dispatch(setCityAction(city))\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"homepage\">/\r\n            <h1 className=\"title\">Weather Hunter</h1>\r\n            <div>\r\n                <img src={homepageimg} alt = \"Background\" className=\"homepageimg\" />\r\n            </div>\r\n            <SearchBox className=\"search-box\"\r\n               placeholder = \"City Name\"\r\n               setSearchedItem = {setCity}\r\n               navigate = {\"/weather\"}\r\n            />\r\n              \r\n            <Footer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Homepage;","export const setCityAction = (city) => ({\r\n    type: \"SET_CITY\",\r\n    payload: city\r\n})\r\n\r\nexport const setCountryAction = (country) => ({\r\n    type: \"SET_COUNTRY\",\r\n    payload: country\r\n})","// import React, {useState} from \"react\";\r\n\r\nfunction GetWeatherDetails(cityName){\r\n\r\n    // const [weatherData, setWeatherData] = useState();\r\n    \r\n    const location = cityName;\r\n    const appid = \"130cafda2bd3fbbd46be177ba93d3cc9\";\r\n    const url = \"https://api.openweathermap.org/data/2.5/forecast?q=\"+ location + \"&appid=\" + appid + \"&units=metric\";\r\n\r\n    const weatherData = fetch(url)\r\n    .then(data => data.json());\r\n\r\n    return weatherData;\r\n\r\n}\r\n\r\nexport default GetWeatherDetails;\r\n\r\n\r\n","//Component takes a unix epoch datetime and converts to formatted time and displays it \r\nimport React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport moment from \"moment\";\r\n\r\nfunction DateDisplay(props){\r\n    const unixDate = props.date;\r\n    const fetchDate = moment.unix(unixDate).format('dddd, MMMM Do, YYYY h:mm:ss A');\r\n\r\n    return (\r\n        <h2>{fetchDate}</h2>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    date: state.date.fetchDate\r\n})\r\n\r\nexport default connect(mapStateToProps)(DateDisplay);","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport \"./general-weather.scss\";\r\n// feels_like,  temp_max, temp_min, humidity\r\nfunction GeneralWeather(props){\r\n    const feel_like = props.temperature? Math.round(props.temperature.feels_like): null;\r\n    const temp_max = props.temperature? Math.round(props.temperature.temp_max): null;\r\n    const temp_min = props.temperature? Math.round(props.temperature.temp_min): null;\r\n    const humidity = props.temperature? props.temperature.humidity: null;\r\n    return(\r\n        <div className=\"general\">\r\n            <p className=\"para\">{\"Feel Like: \" + feel_like+\"\\u00b0C\"}</p>\r\n            <p className=\"para\">{\"Max Temperature: \" + temp_max+\"\\u00b0C\"}</p>\r\n            <p>{\"Min Temperature: \" + temp_min+\"\\u00b0C\"}</p>\r\n            <p>{\"Humidity: \" + humidity+\"%\"}</p>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nconst mapStateToProps= (state) => ({\r\n    temperature: state.temperature.temp\r\n})\r\n\r\nexport default connect(mapStateToProps)(GeneralWeather);","//Component takes a character string as an input and returns an image retrived from openweathermap\r\nimport React from \"react\";\r\n\r\nfunction WeatherIcon({icon}){\r\n    \r\n    return(\r\n        <img src={\"http://openweathermap.org/img/wn/\"+icon+\"@2x.png\"} alt=\"Weather\"/>\r\n    )\r\n}\r\n\r\nexport default WeatherIcon;","import React from \"react\";\r\nimport \"./weather-card.scss\";\r\nimport WeatherIcon from \"../weather-icon/WeatherIcon\";\r\n\r\nfunction WeatherCard(props){\r\n    return(\r\n        <div className=\"card-container\">\r\n            <h1>{props.day}</h1>\r\n            <WeatherIcon \r\n                icon = {props.icon}\r\n            />\r\n            <h4>{\"Min:\" + Math.round(props.Min)+\"\\u00b0C\"} </h4>\r\n            <h4> {\"Max:\" + Math.round(props.Max)+\"\\u00b0C\"}</h4>\r\n            <p>{props.description}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WeatherCard;","import React from \"react\";\r\nimport WeatherCard from \"../weather-card/WeatherCard\";\r\nimport \"./card-container.scss\";\r\nimport moment from \"moment\";\r\n\r\nfunction CardContainer({forecast}){\r\n    console.log(forecast); \r\n    let dailyRecord = null;\r\n    if (forecast){\r\n        dailyRecord = forecast.filter((item, index) => (index % 8 === 0))\r\n    } \r\n    \r\n    return(\r\n        <div className=\"card-list\">\r\n            {dailyRecord? \r\n                dailyRecord.map(\r\n                    (cardItem) => <WeatherCard  \r\n                                key={moment.unix(cardItem.dt).format('dddd')}\r\n                                day={moment.unix(cardItem.dt).format('dddd')}\r\n                                Min={cardItem.main.temp_min}\r\n                                Max={cardItem.main.temp_max}\r\n                                icon={cardItem.weather[0].icon}\r\n                                description = {cardItem.weather[0].description} \r\n                />):\r\n                null\r\n            }\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardContainer;\r\n\r\n","import React from \"react\";\r\nimport \"./button.scss\";\r\n\r\nfunction Button({children}){\r\n    return(\r\n        <button className= \"custom-button\">{children}</button>\r\n    )\r\n}\r\n\r\nexport default Button;","import React, {useEffect, useState} from \"react\";\r\nimport {connect, useDispatch} from \"react-redux\";\r\nimport GetWeatherDetails from \"./getWeatherData\";\r\nimport \"./weather-page.scss\";\r\nimport {Link, withRouter} from \"react-router-dom\";\r\n\r\n/* Other Component Imports */\r\nimport DateDisplay from \"../../components/date-display/DateDisplay\";\r\nimport GeneralWeather from \"../../components/general-weather/GeneralWeather\";\r\nimport CardContainer from \"../../components/card-container/CardContainer\";\r\nimport Button from \"../../components/button/Button\";\r\nimport WeatherIcon from \"../../components/weather-icon/WeatherIcon\";\r\n\r\n/* Redux Imports */\r\nimport {setCountryAction} from \"../../redux/location/location.action\";\r\nimport {setDateAction} from \"../../redux/date/date.action\";\r\nimport {setTempAction} from \"../../redux/temperature/temperature.action\";\r\nimport {setIconAction} from \"../../redux/icon/icon.action\";\r\n\r\nfunction WeatherPage(props){\r\n    const cityName = props.cityName;\r\n    const history = props.history;\r\n\r\n    const [weatherData, setWeatherData] = useState();\r\n    const dispatch = useDispatch();\r\n    \r\n        // const feels_like = null;\r\n        // const temp = null;\r\n        // const temp_max = null;\r\n        // const temp_min = null;\r\n        // const humidity = null;\r\n    \r\n    //Fetch weatherdata and store {\r\n        useEffect(() => // function will run only once after it has mounted. \r\n            {\r\n                const fetchedData = GetWeatherDetails(cityName)\r\n                fetchedData.then(result => setWeatherData(result))\r\n                .catch((err) => history.push(\"/\"))\r\n            }, [cityName, history]\r\n        );\r\n        \r\n        if (weatherData && weatherData.cod!==\"404\") { \r\n            //Fetch Location information from the fetched data and dispatch country action to trigger the reducer\r\n            const {city: {country:countryName}} = weatherData;\r\n            dispatch(setCountryAction(countryName));\r\n\r\n            //As list is a 3 hourly array, we will use the first one as the current\r\n            const current = weatherData.list[0];\r\n           \r\n            //Dispatch setDate action\r\n            const {dt: dateDetails} = current;\r\n            dispatch(setDateAction(dateDetails));\r\n\r\n            //Dipatch setTemperature Action\r\n            const {main: tempDetails} = current;\r\n            dispatch(setTempAction(tempDetails));\r\n\r\n            //Dipatch setIcon Action\r\n            const {weather:[{icon: iconDetails}] } = current;\r\n            dispatch(setIconAction(iconDetails));\r\n\r\n            // //Destructure the temperature data\r\n            // const {feels_like, temp, temp_max, temp_min, humidity} = props.temperature;\r\n\r\n        } \r\n\r\n        // feels_like, temp, temp_max, temp_min, humidity\r\n    return(\r\n        <div className=\"weatherPage\">\r\n            <div className=\"topItems\"> \r\n                <h2>{props.cityName + \"  \" + props.country}</h2>\r\n                <WeatherIcon icon = {props.icon?props.icon:\"01n\"}/>\r\n                <DateDisplay />\r\n                <h1 className=\"temperature\">{props.temperature?Math.round(props.temperature.temp) + \"\\u00b0C\":null}</h1>\r\n            </div>\r\n            <div className=\"keyitems\">\r\n                <GeneralWeather />\r\n            </div>\r\n            \r\n            <CardContainer \r\n                forecast = {weatherData? weatherData.list: null}\r\n            /> \r\n            <div className=\"btn\">\r\n            <Link to=\"/\">\r\n                <Button>Start Again</Button>\r\n            </Link>\r\n            </div> \r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps= (state) => ({\r\n    cityName : state.location.cityName,\r\n    country  : state.location.country,\r\n    temperature: state.temperature.temp,\r\n    icon: state.icon.icon\r\n})\r\n\r\nexport default connect(mapStateToProps)(withRouter(WeatherPage));","export const setDateAction = (date) => ({\r\n    type: \"SET_DATE\",\r\n    payload: date\r\n})","export const setTempAction = (temp) => ({\r\n    type: \"SET_TEMP\",\r\n    payload: temp\r\n})","export const setIconAction = (icon) => ({\r\n    type: \"SET_ICON\",\r\n    payload: icon\r\n})","import './App.css';\nimport HomePage from \"./pages/homepage/Homepage\";\nimport WeatherPage from \"./pages/weatherpage/WeatherPage\";\nimport {Route, BrowserRouter as Router, Switch} from \"react-router-dom\";\n\n// Created 2 routes. First root points to the homepage to enter the location and second route displays the weather page\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact={true} path=\"/\" component={HomePage} />\n        <Route exact={true} path=\"/weather\" component={WeatherPage} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const INITIAL_STATE = {\r\n    cityName: null\r\n}\r\n\r\nconst locationReducer = (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case \"SET_CITY\":\r\n            return {\r\n                ...state,\r\n                cityName: action.payload \r\n            }\r\n        case \"SET_COUNTRY\":\r\n            return {\r\n                ...state,\r\n                country: action.payload,\r\n            }\r\n        default: \r\n            return state;\r\n    }\r\n}\r\n\r\nexport default locationReducer;","const INITIAL_STATE = {\r\n    fetchDate: null\r\n}\r\n\r\nconst dateReducer = (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case \"SET_DATE\":\r\n            return {\r\n                ...state,\r\n                fetchDate: action.payload \r\n            }\r\n        default: \r\n            return state;\r\n    }\r\n}\r\n\r\nexport default dateReducer;","const INITIAL_STATE = {\r\n    temp: null\r\n}\r\n\r\nconst tempReducer = (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case \"SET_TEMP\":\r\n            return {\r\n                ...state,\r\n                temp: action.payload \r\n            }\r\n        default: \r\n            return state;\r\n    }\r\n}\r\n\r\nexport default tempReducer;","const INITIAL_STATE = {\r\n    icon: null\r\n}\r\n\r\nconst iconReducer = (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case \"SET_ICON\":\r\n            return {\r\n                ...state,\r\n                icon: action.payload \r\n            }\r\n        default: \r\n            return state;\r\n    }\r\n}\r\n\r\nexport default iconReducer;","import {combineReducers} from \"redux\";\r\nimport locationReducer from \"./location/location.reducer\";\r\nimport dateReducer from \"./date/date.reducer\";\r\nimport tempReducer from \"./temperature/temperature.reducer\";\r\nimport iconReducer from \"./icon/icon.reducer\";\r\n\r\nexport default combineReducers({\r\n    location: locationReducer,\r\n    date: dateReducer,\r\n    temperature: tempReducer,\r\n    icon: iconReducer\r\n})\r\n","import {createStore, applyMiddleware} from \"redux\";\r\nimport logger from \"redux-logger\";\r\nimport rootReducer from \"./root.reducer\";\r\n\r\nconst middleware = [logger];\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(...middleware));\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store = {store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}